name: master
on:
  push:
    branches:
      - master

jobs:
  build:
    # Prevent running this on forks
    if: github.repository_owner == 'flybywiresim'
    runs-on: ubuntu-latest
    env:
      A32NX_PRODUCTION_BUILD: 1
      A32NX_INSTRUMENTS_BUILD_WORKERS: 2
      MASTER_PRE_RELEASE_ID: 66067756
      MASTER_PRE_RELEASE_TAG: assets/master
      MASTER_ZIP_NAME: A32NX-master.zip
      VMASTER_PRE_RELEASE_ID: 32243965
      VMASTER_PRE_RELEASE_TAG: vmaster
      BUILD_DIR_NAME: master
    steps:
      - name: Checkout source
        uses: actions/checkout@v2
      - name: Set BUILT_DATE_TIME
        run: echo "BUILT_DATE_TIME=$(date -u -Iseconds)" >> $GITHUB_ENV
      - name: Create .env file
        run: |
          echo A32NX_PRODUCTION_BUILD=1 >> .env
          echo CLIENT_ID=${{ secrets.NAVIGRAPH_CLIENT_ID }} >> .env
          echo CLIENT_SECRET=${{ secrets.NAVIGRAPH_CLIENT_SECRET }} >> .env
          echo CHARTFOX_SECRET=${{ secrets.CHARTFOX_SECRET }} >> .env
          echo SENTRY_DSN=${{ secrets.SENTRY_DSN }} >> .env
          echo BUILD_DIR_NAME=${{ env.BUILD_DIR_NAME }} >> .env
          echo LOCALAZY_READ_KEY=${{ secrets.LOCALAZY_READ_KEY }} >> .env
      - name: Build A32NX
        run: |
          ./scripts/dev-env/run.sh ./scripts/setup.sh
          ./scripts/dev-env/run.sh ./scripts/build.sh --no-tty -j 4
      - name: Build ZIP files
        run: |
          ./scripts/dev-env/run.sh node ./scripts/fragment.js

          cp ./build-modules/modules.json ./flybywire-aircraft-a320-neo/install.json
          ./scripts/dev-env/run.sh node ./scripts/install-source.js
          mkdir ./${{ env.BUILD_DIR_NAME }}
          zip -r ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }} ./flybywire-aircraft-a320-neo/
      - name: Get and delete vmaster pre-release zip asset
        run: |
          echo 'checking for first release asset...'
          assets=$( \
            curl --location --request GET \
              --url https://api.github.com/repos/${{ github.repository }}/releases/${{ env.VMASTER_PRE_RELEASE_ID }}/assets
          )

          if [ $(echo $assets | jq '.[0].size') -eq '0' ]; then
            echo 'no asset to delete'
          else
            assetId=$(echo $assets | jq '.[0].id')
            echo 'deleting asset '$assetId
            curl --request DELETE \
              --url https://api.github.com/repos/${{ github.repository }}/releases/assets/$assetId \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'
          fi
      - name: Upload release binary to vmaster
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.VMASTER_PRE_RELEASE_ID }}/assets{?name,label}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }}
          asset_name: ${{ env.MASTER_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Update vmaster pre-release body
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          curl --request PATCH \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/${{ env.VMASTER_PRE_RELEASE_ID }}' \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "body": "This pre-release has its ${{ env.MASTER_ZIP_NAME }} asset updated on every commit to the master branch\nDo not use the source code assets, they are never updated\nLast updated on ${{ env.BUILT_DATE_TIME }} from commit ${{ github.sha }}\nThis link will always point to the latest master build: https://github.com/${{ github.repository }}/releases/download/${{ env.VMASTER_PRE_RELEASE_TAG }}/${{ env.MASTER_ZIP_NAME }}"
            }'
      - name: Upload to Bunny CDN
        env:
          BUNNY_BUCKET_PASSWORD: ${{ secrets.BUNNY_BUCKET_PASSWORD }}
          BUNNY_SECRET_TOKEN: ${{ secrets.BUNNY_SECRET_TOKEN }}
          BUNNY_BUCKET_DESTINATION: addons/a32nx/master
        run: |
          ./scripts/cdn.sh $BUNNY_BUCKET_DESTINATION ./build-modules
          ./scripts/cdn.sh $BUNNY_BUCKET_DESTINATION ./${{ env.BUILD_DIR_NAME }}
      - name: Delete old GitHub Pre-Release assets
        uses: mknejp/delete-release-assets@v1
        with:
          token: ${{ github.token }}
          tag: ${{ env.MASTER_PRE_RELEASE_TAG }}
          assets: "*"
          fail-if-no-assets: false
      - name: Upload aicraft package to GitHub Pre-Release Assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}/assets{?name,label}
          asset_path: ./${{ env.BUILD_DIR_NAME }}/${{ env.MASTER_ZIP_NAME }}
          asset_name: ${{ env.MASTER_ZIP_NAME }}
          asset_content_type: application/zip
      - name: Upload fragments to GitHub Pre-Release Assets
        uses: dwenegar/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          release_id: ${{ env.MASTER_PRE_RELEASE_ID }}
          assets_path: ./build-modules/
      - name: Update GitHub Pre-Release Body
        run: |
          curl --request PATCH \
            --url 'https://api.github.com/repos/${{ github.repository }}/releases/${{ env.MASTER_PRE_RELEASE_ID }}' \
            --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            --header 'Content-Type: application/json' \
            --data-raw '{
              "body": "This pre-release has its asset updated on every commit to the master branch\nLast updated on ${{ env.BUILT_DATE_TIME }} from commit ${{ github.sha }}\nThis link will always point to the latest master build: https://github.com/${{ github.repository }}/releases/download/${{ env.MASTER_PRE_RELEASE_TAG }}/${{ env.MASTER_ZIP_NAME }}"
            }'
